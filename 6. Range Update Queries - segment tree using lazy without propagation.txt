#include<bits/stdc++.h>
using namespace std;
#define nl                      "\n"
#define ff                      first
#define ss                      second
#define ll                      long long int
#define pb                      push_back
#define cceil(a, b)             (((a) + (b) - 1) / (b))
#define sqr(x)                  ((x)*(x))
#define pi                      acos(-1)
#define gcd(x,y)                __gcd(x,y)
#define lcm(x,y)                ((x * y) / gcd(x,y))
#define all(x)                  (x).begin(), (x).end()
#define sorta(x)                sort(all(x))
#define sortd(x)                sort(all(x), greater<int>())
#define max3(x,y,z)             max({x, y, z})
#define max4(x,y,z,zz)          max({x, y, z, zz})
#define maxm(x)                 *max_element(all(x))
#define min3(x,y,z)             min({x, y, z})
#define min4(x,y,z,zz)          min({x, y, z, zz})
#define minm(x)                 *min_element(all(x))
#define valid(nx,ny,row,col)    (nx >= 1 && nx <= row && ny >= 1 && ny <= col)
#define yes                     cout << "Yes" << nl
#define yess                    cout << "YES" << nl
#define no                      cout << "No" << nl
#define noo                     cout << "NO" << nl
#define mone                    cout << -1 << nl
#define alice                   cout << "Alice" << nl
#define bob                     cout << "Bob" << nl
#define multiple_test           int test; cin >> test; while(test--) { solve(); }
#define single_test             solve();
#define space                   >> ' ' >>

const int MOD = 1e9 + 7;

using pairi     = pair<int, int>;
using pairl     = pair<ll, ll>;
using mapi      = map<int, int>;
using vi        = vector<int>;
using vl        = vector<ll>;
using vvi       = vector<vi>;
using vvl       = vector<vl>;
using vpi       = vector<pairi>;
using vpl       = vector<pairl>;
using si        = set<int>;
using qi        = queue<int>;
using pqia      = priority_queue<int>;
using pqid      = priority_queue<int, vector<int>, greater<int>>;

/*------------------------------Graph Moves----------------------------*/
// const int fx[]={+1,-1,+0,+0};             // 4 directions
// const int fy[]={+0,+0,+1,-1};             // 4 directions
// const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1}; // Kings Move
// const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1}; // Kings Move
// const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
// const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
/*---------------------------------------------------------------------*/
vector<ll> a, updatevalue;
void update(int at, int l, int r, int lll, int rr, ll value)
{
    if(r < lll or rr < l)
        return;
    if(lll <= l and r <= rr)
    {
        updatevalue[at] += value;
        return;
    }
    int mid = (l + r) / 2;
    update(at * 2, l, mid, lll, rr, value);
    update(at * 2 + 1, mid + 1, r, lll, rr, value);
}
ll query(int at, int l, int r, int pos, ll sum)
{
    if(l == r)
    {
        sum += a[l] + updatevalue[at];
        return sum;
    }
    int mid = (l + r) / 2;
    if(pos <= mid) 
        sum += query(at * 2, l, mid, pos, sum) + updatevalue[at];
    else
        sum += query(at * 2 + 1, mid + 1, r, pos, sum) + updatevalue[at];
    return sum;
}
void solve()
{
    int n, q;
    cin>>n>>q;
    a.resize(n+1);
    updatevalue.resize(4 * n, 0);
    for(int i = 1; i <= n; i++)
        cin>>a[i];
    while(q--)
    {
        int p;
        cin>>p;
        if(p == 2)
        {
            int k;
            cin>>k;
            cout<<query(1, 1, n, k, 0)<<endl;
            continue;
        }
        int lll, rr;
        ll value;
        cin>>lll>>rr>>value;
        update(1, 1, n, lll, rr, value);
    }
}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    //multiple_test
    single_test
    return 0;
}
