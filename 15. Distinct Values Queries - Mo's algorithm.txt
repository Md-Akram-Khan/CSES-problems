#include<bits/stdc++.h>
using namespace std;
#define nl                      "\n"
#define ff                      first
#define ss                      second
#define ll                      long long int
#define pb                      push_back
#define cceil(a, b)             (((a) + (b) - 1) / (b))
#define sqr(x)                  ((x)*(x))
#define pi                      acos(-1)
#define gcd(x,y)                __gcd(x,y)
#define lcm(x,y)                ((x * y) / gcd(x,y))
#define all(x)                  (x).begin(), (x).end()
#define sorta(x)                sort(all(x))
#define sortd(x)                sort(all(x), greater<int>())
#define max3(x,y,z)             max({x, y, z})
#define max4(x,y,z,zz)          max({x, y, z, zz})
#define maxm(x)                 *max_element(all(x))
#define min3(x,y,z)             min({x, y, z})
#define min4(x,y,z,zz)          min({x, y, z, zz})
#define minm(x)                 *min_element(all(x))
#define valid(nx,ny,row,col)    (nx >= 1 && nx <= row && ny >= 1 && ny <= col)
#define yes                     cout << "Yes" << nl
#define yess                    cout << "YES" << nl
#define no                      cout << "No" << nl
#define noo                     cout << "NO" << nl
#define mone                    cout << -1 << nl
#define alice                   cout << "Alice" << nl
#define bob                     cout << "Bob" << nl
#define multiple_test           int test; cin >> test; while(test--) { solve(); }
#define single_test             solve();
#define space                   >> ' ' >>

const int MOD = 1e9 + 7;

using pairi     = pair<int, int>;
using pairl     = pair<ll, ll>;
using mapi      = map<int, int>;
using vi        = vector<int>;
using vl        = vector<ll>;
using vvi       = vector<vi>;
using vvl       = vector<vl>;
using vpi       = vector<pairi>;
using vpl       = vector<pairl>;
using si        = set<int>;
using qi        = queue<int>;
using pqia      = priority_queue<int>;
using pqid      = priority_queue<int, vector<int>, greater<int>>;

/*------------------------------Graph Moves----------------------------*/
// const int fx[]={+1,-1,+0,+0};             // 4 directions
// const int fy[]={+0,+0,+1,-1};             // 4 directions
// const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1}; // Kings Move
// const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1}; // Kings Move
// const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
// const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
/*---------------------------------------------------------------------*/
const ll block_size = 600;
const int sz = 2e5;
 
struct Query {
    int l, r, index, ans;

    bool operator<(const Query& other) const {
        if (l / block_size != other.l / block_size) {
            return l < other.l;
        }
        return ((l / block_size) & 1) ? (r < other.r) : (r > other.r);
    }
};

struct TVal {
    int value, index;
};
 
int n, q, cnt = 1;
TVal arr [sz];
Query qr [sz];
int freq [sz];
 
void move(int& l, int& r, int& a, int& b) {
    while (a < l) {
        l--;
        if (++freq[arr[l].value] == 1)
            cnt++;
    }
    while (r < b) {
        r++;
        if (++freq[arr[r].value] == 1)
            cnt++;
    }
    while (l < a) {
        if (--freq[arr[l].value] == 0)
            cnt--;
        l++;
    }
    while (b < r) {
        if (--freq[arr[r].value] == 0)
            cnt--;
        r--;
    }
}
 
void compress() {
    sort(arr, arr+n, [](const TVal& a, const TVal& b) {
        return a.value < b.value;
    });
    int last = arr[0].value, aux;
    arr[0].value = 0;
    for(int i = 1; i < n; i++) {
        aux = arr[i].value;
        arr[i].value = arr[i-1].value + (last != arr[i].value);
        last = aux;
    }
    sort(arr, arr+n, [](const TVal& a, const TVal& b) {
        return a.index < b.index;
    });
}

void solve()
{
    cin >> n >> q;
    for(int i = 0; i < n; i++) {
        cin >> arr[i].value;
        arr[i].index = i;
    }
    compress();
    for(int i = 0; i < q; i++) {
        cin >> qr[i].l >> qr[i].r;
        qr[i].l--; qr[i].r--;
        qr[i].index = i;
    }
    sort(qr, qr + q);
    freq[arr[0].value] = 1;
    int l = 0, r = 0;
    for(int i = 0; i < q; i++) {
        move(l, r, qr[i].l, qr[i].r);
        qr[i].ans = cnt;
    }
    sort(qr, qr+q, [](const Query& a, const Query& b) {
        return a.index < b.index;
    });
 
    for(int i = 0; i < q; i++)
        cout << qr[i].ans << '\n';

}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    //multiple_test
    single_test
    return 0;
}
